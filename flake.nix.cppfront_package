{
  description = "XDP2 development environment";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.${system};
        llvmP = pkgs.llvmPackages_20;

        # nixDebug code will be left in place to allow for future debugging
        # DEBUGGING: Keep all debug code in place - adjust nixDebug level to control verbosity
        nixDebug = 6; # 0 = no debug, 7 max debug (like syslog level)

        # Create a Python environment with scapy included.
        # This is the idiomatic Nix way to handle Python dependencies.
        pythonWithScapy = pkgs.python3.withPackages (ps: [ ps.scapy ]);

        devPackages = with pkgs; [
          # Build tools
          gnumake pkg-config bison flex
          # Core utilities
          bash coreutils gnused gawk gnutar xz git
          # Libraries
          boost libpcap libelf libbpf pythonWithScapy
          # Development tools
          graphviz bpftools
          # Compilers for the dual-toolchain environment
          gcc llvmP.clang llvmP.llvm.dev llvmP.clang-unwrapped
          # Add cppfront for development shell
          cppfront
        ];

        xdp2-build = pkgs.stdenv.mkDerivation {
          pname = "xdp2-build";
          version = "dev";
          src = ./.;

          nativeBuildInputs = [
            pkgs.pkg-config
            llvmP.clang # For HOST_CXX
            llvmP.llvm.dev # For llvm-config
          ];

          buildInputs = with pkgs; [
            # Core libraries
            boost
            libpcap
            libelf
            libbpf
            zlib
            ncurses
            # Per nix_python_compile_errors.md, the build derivation needs a clean python3.
            # The pythonWithScapy environment is only for the interactive dev shell.
            # Consistent Python environment across all phases
            pythonWithScapy
            # CPython in nixpkgs, the C headers (Python.h) and python3-config are already in pkgs.python3. You don't need a separate dev output (unlike many C libs)
            python3
            # Add LLVM and Clang libraries for linking during the clang check
            llvmP.llvm
            llvmP.clang-unwrapped
            # Add official Nix cppfront package (v0.8.1) instead of building from source
            cppfront
          ];

          patchPhase = ''
            # Option B: Keep only essential patches - remove complex patches that might cause issues
            substituteInPlace src/configure --replace-fail '#!/bin/bash' '#!${pkgs.bash}/bin/bash'
            substituteInPlace src/test/parser/run-tests.sh --replace-fail '#!/bin/bash' '#!${pkgs.bash}/bin/bash'

            # Keep essential header fix for cppfront
            sed -i '1i#include <functional>\n#include <unordered_map>\n' thirdparty/cppfront/include/cpp2util.h

            # Keep essential pkg-config fix
            substituteInPlace src/configure --replace-fail 'echo "PATH_ARG=\"--with-path=$PKG_CONFIG_PATH\""' 'echo "PATH_ARG=\"\""'

            # Keep essential C++ standard fix
            substituteInPlace src/tools/compiler/src/main.cpp --replace-fail 'if (include_paths.has_value())' 'if (include_paths)'

            # NEW: Patch Makefile to use Nix cppfront package instead of building from source
            # Replace the CPPFRONT variable and remove the dependency
            substituteInPlace src/tools/compiler/Makefile \
              --replace-fail "../../../thirdparty/cppfront/cppfront-compiler" \
              "cppfront"

            # Remove the dependency on $(CPPFRONT) since cppfront is now available via PATH
            substituteInPlace src/tools/compiler/Makefile \
              --replace-fail "gen-patterns-cpp: \$(CPPFRONT)" \
              "gen-patterns-cpp:"
          '';

          # Option B: Simplified configure phase - more like Ubuntu approach
          configurePhase = ''
            # The configure script must be run from within the 'src' directory
            cd src

            # Set essential environment variables (like Ubuntu would)
            export HOST_CXX=g++
            export HOST_CC=gcc
            export HOST_LLVM_CONFIG=${llvmP.llvm.dev}/bin/llvm-config

            # Simple configure call - let it use defaults like Ubuntu
            ./configure --build-opt-parser --installdir "$out"

            # DEBUG: Print config.mk contents to understand the build configuration
            echo "=== config.mk contents ==="
            cat config.mk
            echo "=== End config.mk ==="
          '';

          # REMOVED: preBuild phase no longer needed
          # We now use the official Nix cppfront package (v0.8.1) instead of building from source
          # This is cleaner and more standard Nix practice

          # Let the default stdenv buildPhase handle the main build
          # cppfront is now available via PATH from the Nix package

          # The installPhase also runs from within the 'src' directory.
          installPhase = ''
            make install
          '';
        };
      in
      {
        devShells.default = pkgs.mkShell {
          packages = devPackages;

          shellHook = ''
            export XDP2DIR=${xdp2-build}
            export BUILD_OPT_PARSER=y
            export PYTHON_VER=3
            export PKG_CONFIG_PATH=${pkgs.lib.makeSearchPath "lib/pkgconfig" devPackages}

            echo "=== XDP2 Development Shell ==="
            echo "GCC and Clang are available in the environment."
            echo "Run 'make' in 'src/' to build the project."
          '';
        };
      });
}